# Cloud Build Configuration for Deployment
# Builds Docker image and deploys to Cloud Run
# Triggers: Manual (production) or Auto (staging on merge to main)
# Duration: ~3-5 minutes

substitutions:
  # Default values - can be overridden by trigger
  _ENVIRONMENT: 'staging'
  _SERVICE_NAME: 'flow-${_ENVIRONMENT}'
  _REGION: 'us-central1'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'
  _MEMORY: '512Mi'
  _CPU: '1'

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/flow/${_SERVICE_NAME}:$SHORT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/flow/${_SERVICE_NAME}:latest'
      - '--build-arg'
      - 'NODE_ENV=production'
      - '--build-arg'
      - 'NEXT_PUBLIC_PLATFORM=www'
      - '.'
    waitFor: ['-']
  
  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/flow/${_SERVICE_NAME}'
    waitFor: ['build-image']
  
  # Step 3: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/flow/${_SERVICE_NAME}:$SHORT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--min-instances=${_MIN_INSTANCES}'
      - '--max-instances=${_MAX_INSTANCES}'
      - '--memory=${_MEMORY}'
      - '--cpu=${_CPU}'
      - '--timeout=60s'
      - '--concurrency=80'
      - '--service-account=flow-runtime@$PROJECT_ID.iam.gserviceaccount.com'
      # Secrets from Secret Manager
      - '--set-secrets=ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest'
      - '--set-secrets=OAUTH_CLIENT_SECRET=OAUTH_CLIENT_SECRET:latest'
      - '--set-secrets=SESSION_SECRET=SESSION_SECRET:latest'
      # Environment variables
      - '--set-env-vars=NODE_ENV=production'
      - '--set-env-vars=NEXT_PUBLIC_PLATFORM=www'
      - '--set-env-vars=GOOGLE_CLOUD_PROJECT=$PROJECT_ID'
      # Labels for tracking
      - '--labels=environment=${_ENVIRONMENT},managed-by=cloud-build,commit-sha=$SHORT_SHA'
    waitFor: ['push-image']
  
  # Step 4: Health check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        # Wait for service to be ready (max 2 minutes)
        for i in {1..24}; do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
          if [ $HTTP_CODE -eq 200 ] || [ $HTTP_CODE -eq 302 ]; then
            echo "✅ Health check passed! HTTP $HTTP_CODE"
            exit 0
          fi
          echo "⏳ Waiting for service... (attempt $i/24) HTTP $HTTP_CODE"
          sleep 5
        done
        
        echo "❌ Health check failed after 2 minutes"
        exit 1
    waitFor: ['deploy']

# Docker image names
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/flow/${_SERVICE_NAME}:$SHORT_SHA'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/flow/${_SERVICE_NAME}:latest'

# Build configuration
options:
  # Use higher CPU/memory for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Disk size for Docker builds
  diskSizeGb: 50
  
  # Build logs
  logging: CLOUD_LOGGING_ONLY
  
  # Timeout for entire deployment
  timeout: '1200s'  # 20 minutes

# Service account with deployment permissions
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/$PROJECT_NUMBER@cloudbuild.gserviceaccount.com'

# Access to secrets during build (if needed for build-time operations)
availableSecrets:
  secretManager:
    - versionName: 'projects/$PROJECT_ID/secrets/ANTHROPIC_API_KEY/versions/latest'
      env: 'ANTHROPIC_API_KEY'
    - versionName: 'projects/$PROJECT_ID/secrets/OAUTH_CLIENT_SECRET/versions/latest'
      env: 'OAUTH_CLIENT_SECRET'
    - versionName: 'projects/$PROJECT_ID/secrets/SESSION_SECRET/versions/latest'
      env: 'SESSION_SECRET'
