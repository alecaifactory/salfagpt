# Salfacorp Deployment Protocol

## üéØ Purpose

This rule defines the complete deployment process for Salfacorp (project: salfagpt) to Google Cloud Run. Follow these steps exactly for consistent, reliable deployments.

---

## üìã Deployment Protocol

### When User Says: "deploy to salfacorp" or "deploy to production salfacorp"

Execute these steps in order:

### Step 1: Verify Environment

```bash
# 1.1 Set GCloud project
gcloud config set project salfagpt

# 1.2 Verify project
gcloud config get-value project
# Must return: salfagpt

# 1.3 Check authentication
gcloud auth list | grep ACTIVE

# 1.4 Check Firestore auth
gcloud auth application-default print-access-token > /dev/null 2>&1 && echo "‚úÖ Firestore OK"
```

**If auth fails:** Run `gcloud auth login` and `gcloud auth application-default login`

---

### Step 2: Pre-Deployment Checks

```bash
# 2.1 Verify on main branch
git branch --show-current
# Must be: main

# 2.2 Verify no uncommitted changes
git status
# Must show: "working tree clean"

# 2.3 Pull latest (if team environment)
git pull origin main
```

---

### Step 3: Build

```bash
# 3.1 Run production build
npm run build

# 3.2 Verify exit code
echo $?
# Must be: 0
```

**If build fails:** Fix TypeScript/build errors before proceeding

---

### Step 4: Deploy to Cloud Run

```bash
gcloud run deploy salfagpt \
  --source . \
  --region us-central1 \
  --project salfagpt \
  --allow-unauthenticated \
  --min-instances 1 \
  --max-instances 10 \
  --memory 2Gi \
  --cpu 2 \
  --timeout 300s
```

**Wait for:** "Service [salfagpt] revision [salfagpt-XXXXX-YYY] has been deployed"

**Note down:** Revision name (e.g., salfagpt-00011-xyz)

---

### Step 5: Update Environment Variables

```bash
# 5.1 Get service URL
SERVICE_URL=$(gcloud run services describe salfagpt \
  --region us-central1 \
  --project salfagpt \
  --format='value(status.url)')

echo "Service URL: $SERVICE_URL"

# 5.2 Update all environment variables
gcloud run services update salfagpt \
  --region us-central1 \
  --project salfagpt \
  --update-env-vars="GOOGLE_CLOUD_PROJECT=salfagpt,PUBLIC_BASE_URL=$SERVICE_URL,NODE_ENV=production,GOOGLE_AI_API_KEY=AIzaSyALvlJm5pl5Ygp_P-nM1ey7vWP7E6O4mV0,GOOGLE_CLIENT_ID=82892384200-va003qnnoj9q0jf19j3jf0vects0st9h.apps.googleusercontent.com,JWT_SECRET=df45d920393b23177f56675c5bac8d99058b3388be154b620ef2e8eb7ad58dfdaeaa76514fd268837c60bfd616cbf28be65a736818fed62f8a0a90b766e6542f"
```

**Critical Variables:**
- `GOOGLE_CLOUD_PROJECT=salfagpt`
- `PUBLIC_BASE_URL` - Must match service URL
- `NODE_ENV=production`
- API keys from `.env.salfacorp`

---

### Step 6: Verify Traffic Assignment

```bash
# 6.1 Check current traffic
gcloud run services describe salfagpt \
  --region us-central1 \
  --project salfagpt \
  --format="value(status.traffic)"

# 6.2 If needed, update traffic to specific revision
gcloud run services update-traffic salfagpt \
  --to-revisions=REVISION_NAME=100 \
  --region us-central1 \
  --project salfagpt
```

**Traffic should be:** 100% on latest revision

---

### Step 7: Verification

```bash
# 7.1 Test service responds
curl -I $SERVICE_URL/

# Expected: HTTP/2 200

# 7.2 Test auth redirect
curl -I $SERVICE_URL/chat

# Expected: HTTP/2 302 location: /auth/login

# 7.3 Check logs for errors
gcloud logging read \
  "resource.type=cloud_run_revision AND resource.labels.service_name=salfagpt AND severity>=ERROR" \
  --limit 10 \
  --project salfagpt
```

---

## üö® Critical Rules

### 1. ALWAYS Use Project: salfagpt

```bash
# ‚úÖ CORRECT
gcloud config set project salfagpt
gcloud run deploy salfagpt --project salfagpt

# ‚ùå WRONG - Don't use other projects
gcloud config set project gen-lang-client-0986191192
gcloud run deploy --project flow-chat
```

### 2. ALWAYS Use Service: salfagpt

```bash
# ‚úÖ CORRECT
gcloud run deploy salfagpt

# ‚ùå WRONG - Different services
gcloud run deploy flow-production
gcloud run deploy flow-chat
```

### 3. ALWAYS Update PUBLIC_BASE_URL

```bash
# After every deployment:
SERVICE_URL=$(gcloud run services describe salfagpt ...)
gcloud run services update salfagpt --update-env-vars="PUBLIC_BASE_URL=$SERVICE_URL"
```

**Why:** OAuth requires correct redirect URI

### 4. ALWAYS Verify Before Deployment

```bash
# Must pass:
- git status shows "working tree clean"
- npm run build succeeds
- gcloud config get-value project returns "salfagpt"
```

---

## üìä Service Configuration

### Current Salfacorp Production

```yaml
Project: salfagpt
Service: salfagpt
Region: us-central1
URL: https://salfagpt-3snj65wckq-uc.a.run.app

Resources:
  Memory: 2Gi
  CPU: 2
  Timeout: 300s

Scaling:
  Min: 1
  Max: 10

Authentication:
  Allow Unauthenticated: Yes
```

---

## üîÑ Rollback Procedure

If deployment breaks something:

```bash
# Quick rollback to previous revision
PREV_REV=$(gcloud run revisions list \
  --service salfagpt \
  --region us-central1 \
  --project salfagpt \
  --format="value(name)" \
  --limit 2 | tail -1)

gcloud run services update-traffic salfagpt \
  --to-revisions=$PREV_REV=100 \
  --region us-central1 \
  --project salfagpt

echo "‚úÖ Rolled back to $PREV_REV"
```

---

## üìö Related Documentation

- `deploy-full-salfacorp.md` - Complete deployment manual
- `.env.salfacorp` - Environment variables for Salfacorp
- `DEPLOYMENT_SUCCESS_2025-10-22.md` - Latest deployment log

---

## ‚úÖ Success Message Template

After successful deployment, report to user:

```
‚úÖ DEPLOYMENT EXITOSO A SALFACORP

Proyecto: salfagpt
Servicio: salfagpt
Revisi√≥n: [REVISION_NAME]
URL: https://salfagpt-3snj65wckq-uc.a.run.app
Tr√°fico: 100%
Status: ‚úÖ Healthy

Cambios deployados:
- [List commits or changes]

Verificaci√≥n:
‚úÖ Service responding (HTTP 200)
‚úÖ Auth redirect working
‚úÖ Environment variables configured
‚úÖ No critical errors in logs
```

---

## üîç Troubleshooting

### "Project not found"
```bash
# Verify project exists
gcloud projects list | grep salfagpt

# If not in list, check access:
gcloud projects get-iam-policy salfagpt
```

### "Permission denied"
```bash
# Check your permissions
gcloud projects get-iam-policy salfagpt \
  --flatten="bindings[].members" \
  --filter="bindings.members:$(gcloud config get-value account)"
```

### "Service already exists"
```bash
# This is normal - service gets updated, not recreated
# Deployment will create new revision automatically
```

---

**Version:** 1.0.0  
**Last Updated:** 2025-10-22  
**Status:** ‚úÖ Production Ready  
**Project:** salfagpt (Salfacorp)
