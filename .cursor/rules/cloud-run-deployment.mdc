# Cloud Run Deployment Rules - SalfaGPT Project

## üéØ Purpose

This rule documents the complete Cloud Run deployment process for the salfagpt project, including environment configuration, OAuth setup, and troubleshooting. It ensures successful deployments without the trial-and-error that occurred initially.

---

## üö® CRITICAL: Complete Environment Variable Setup

### Required Environment Variables (ALL 7 Must Be Set)

```bash
GOOGLE_CLOUD_PROJECT=salfagpt
NODE_ENV=production
PUBLIC_BASE_URL=https://flow-chat-3snj65wckq-uc.a.run.app
GOOGLE_AI_API_KEY=AIzaSy...  # From .env
GOOGLE_CLIENT_ID=82892384200-...apps.googleusercontent.com  # From .env
GOOGLE_CLIENT_SECRET=GOCSPX-...  # From .env
JWT_SECRET=...  # From .env
```

**Why ALL are required:**
- Missing `GOOGLE_CLIENT_ID` ‚Üí OAuth fails with "missing client_id"
- Missing `GOOGLE_CLIENT_SECRET` ‚Üí OAuth fails with "invalid_client"
- Missing `GOOGLE_AI_API_KEY` ‚Üí AI responses fail
- Missing `JWT_SECRET` ‚Üí Session authentication fails
- Missing `PUBLIC_BASE_URL` ‚Üí OAuth callback fails
- Missing `GOOGLE_CLOUD_PROJECT` ‚Üí Firestore/Storage fails
- Missing `NODE_ENV` ‚Üí App behavior incorrect

---

## üìã Deployment Process

### Step 1: Pre-Deployment Checklist

```bash
# Verify build works locally
npm run build

# Check .gitignore includes sensitive files
git check-ignore .env  # Should output: .env

# Verify all secrets are in .env
grep -E "GOOGLE_AI_API_KEY|GOOGLE_CLIENT_ID|GOOGLE_CLIENT_SECRET|JWT_SECRET" .env | wc -l
# Should output: 4 (or more)
```

---

### Step 2: Initial Deployment

```bash
# Deploy to Cloud Run (environment vars will be set separately)
gcloud run deploy flow-chat \
  --source . \
  --project=salfagpt \
  --region=us-central1 \
  --platform=managed \
  --allow-unauthenticated \
  --min-instances=0 \
  --max-instances=10 \
  --memory=2Gi \
  --cpu=2 \
  --timeout=300 \
  --set-env-vars="GOOGLE_CLOUD_PROJECT=salfagpt,NODE_ENV=production"
```

---

### Step 3: Get Service URL

```bash
SERVICE_URL=$(gcloud run services describe flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --format='value(status.url)')

echo "Service URL: $SERVICE_URL"
# Example: https://flow-chat-3snj65wckq-uc.a.run.app
```

---

### Step 4: Configure All Environment Variables

**CRITICAL:** Clear existing vars first to avoid conflicts, then set all at once.

```bash
# Clear all existing environment variables and secrets
gcloud run services update flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --clear-env-vars \
  --clear-secrets

# Get secrets from .env
GOOGLE_AI_KEY=$(grep "^GOOGLE_AI_API_KEY=" .env | cut -d'=' -f2)
GOOGLE_CLIENT_ID=$(grep "^GOOGLE_CLIENT_ID=" .env | cut -d'=' -f2)
GOOGLE_CLIENT_SECRET=$(grep "^GOOGLE_CLIENT_SECRET=" .env | cut -d'=' -f2)
JWT_SECRET=$(grep "^JWT_SECRET=" .env | cut -d'=' -f2)

# Set ALL environment variables at once
gcloud run services update flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --set-env-vars="GOOGLE_CLOUD_PROJECT=salfagpt,NODE_ENV=production,PUBLIC_BASE_URL=$SERVICE_URL,GOOGLE_AI_API_KEY=$GOOGLE_AI_KEY,GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET,JWT_SECRET=$JWT_SECRET"
```

---

### Step 5: Configure OAuth in Google Cloud Console

**MANUAL STEP - Cannot be automated**

1. Go to: https://console.cloud.google.com/apis/credentials?project=salfagpt
2. Find OAuth 2.0 Client ID: `82892384200-va003qnnoj9q0jf19j3jf0vects0st9h`
3. Click to edit
4. Under **Authorized JavaScript Origins**, add:
   ```
   https://flow-chat-3snj65wckq-uc.a.run.app
   ```
5. Under **Authorized Redirect URIs**, add:
   ```
   https://flow-chat-3snj65wckq-uc.a.run.app/auth/callback
   ```
6. Save changes
7. **Wait 5-10 minutes** for changes to propagate

---

### Step 6: Verify Deployment

```bash
# 1. Health check
curl -s "https://flow-chat-3snj65wckq-uc.a.run.app/api/health/firestore" | jq .

# Expected: "status": "healthy"

# 2. Verify all env vars
gcloud run services describe flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --format=json | jq -r '.spec.template.spec.containers[0].env[] | "\(.name): \(.value)"' | sort

# Expected: All 7 variables listed

# 3. Test OAuth login
echo "Test OAuth at: https://flow-chat-3snj65wckq-uc.a.run.app/auth/login"
# Open in browser, should redirect to Google

# 4. Check logs for errors
gcloud logging tail "resource.type=cloud_run_revision AND resource.labels.service_name=flow-chat" \
  --project=salfagpt \
  --limit=20
```

---

## üèóÔ∏è Project-Specific Requirements

### Cloud Storage Bucket

**Must exist before file uploads work:**

```bash
# Create bucket
gsutil mb -p salfagpt -l us-central1 gs://salfagpt-uploads

# Verify
gsutil ls -p salfagpt | grep salfagpt-uploads
```

**Code configuration:**
```typescript
// src/lib/storage.ts
export const BUCKET_NAME = PROJECT_ID === 'salfagpt' 
  ? 'salfagpt-uploads' 
  : 'gen-lang-client-0986191192-uploads';
```

---

### Dependencies

**Required in package.json:**
```json
{
  "dependencies": {
    "@astrojs/node": "^9.0.0",  // v9+ for Astro v5
    "@google-cloud/firestore": "^7.10.0",
    "@google-cloud/bigquery": "^7.9.0",
    "@google-cloud/storage": "^7.14.0",
    "@google-cloud/logging": "latest",  // Required
    "@google-cloud/error-reporting": "latest"  // Required
  }
}
```

---

### Astro Configuration

**astro.config.mjs must include:**

```javascript
export default defineConfig({
  output: 'server',
  adapter: node({ mode: 'standalone' }),
  vite: {
    ssr: {
      // CRITICAL: External Google Cloud packages
      external: [
        '@google-cloud/firestore',
        '@google-cloud/bigquery',
        '@google-cloud/storage',
        '@google-cloud/logging',
        '@google-cloud/error-reporting',
      ],
    },
  },
});
```

**Why:** Prevents Rollup from trying to bundle server-side packages.

---

### Build Scripts

**package.json:**
```json
{
  "scripts": {
    "dev": "npm run load-env && astro dev",
    "build": "astro build",  // For Cloud Run
    "build:local": "npm run load-env && astro build",  // For local
    "load-env": "node scripts/load-env.js"
  }
}
```

**Why:** Cloud Run build doesn't have `.env.project` file, so we skip env loading.

---

## üîÑ Update Existing Deployment

**If service is already deployed, just update code:**

```bash
# 1. Make your code changes
# 2. Commit to git
git add .
git commit -m "feat: Add new feature"
git push origin main

# 3. Deploy (env vars persist)
gcloud run deploy flow-chat \
  --source . \
  --project=salfagpt \
  --region=us-central1

# Environment variables are NOT cleared, so no need to set again
```

**Only re-set environment variables if:**
- Adding new secrets
- Rotating existing secrets
- Changing PUBLIC_BASE_URL
- Changing GOOGLE_CLOUD_PROJECT

---

## üêõ Troubleshooting

### Build Fails in Cloud Run

**Check build logs:**
```bash
# Get latest build ID
BUILD_ID=$(gcloud builds list --project=salfagpt --limit=1 --format="value(id)")

# View logs
gcloud builds log $BUILD_ID --project=salfagpt
```

**Common build errors:**

1. **"npm ci" fails** ‚Üí Dependency version conflict
   - Solution: Update package.json versions
   
2. **"Rollup failed to resolve"** ‚Üí Missing external package
   - Solution: Add to `ssr.external` in astro.config.mjs
   
3. **"load-env.js not found"** ‚Üí Build script issue
   - Solution: Use `"build": "astro build"` (no load-env)

---

### OAuth Fails in Production

**Error: "invalid_client"**
- Check `GOOGLE_CLIENT_SECRET` matches Google Console
- Verify CLIENT_ID matches

**Error: "redirect_uri_mismatch"**
- Check OAuth redirect URIs include production URL
- Wait 5-10 minutes after adding URI

**Error: "Missing parameter: client_id"**
- Check `GOOGLE_CLIENT_ID` is set in Cloud Run
- Verify it's not empty

---

### File Upload Fails

**Error: "Cloud Storage upload failed"**
- Check bucket exists: `gsutil ls -p salfagpt`
- Check permissions: Service account needs Storage Admin role
- Verify bucket name in code matches actual bucket

---

## ‚úÖ Success Verification

**All checks must pass:**

```bash
# 1. Service is running
gcloud run services describe flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --format='value(status.url)'
# Output: https://flow-chat-3snj65wckq-uc.a.run.app

# 2. Health check passes
curl -s "https://flow-chat-3snj65wckq-uc.a.run.app/api/health/firestore" \
  | jq -r '.status'
# Output: healthy

# 3. All env vars set
gcloud run services describe flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --format=json \
  | jq '.spec.template.spec.containers[0].env | length'
# Output: 7

# 4. OAuth login works
# Manual test: Open browser, login should work

# 5. No errors in logs
gcloud logging tail "resource.type=cloud_run_revision" \
  --project=salfagpt \
  --limit=10
# Check for no critical errors
```

---

## üîê Security Best Practices

### DO's ‚úÖ

1. ‚úÖ **Keep secrets in .env (gitignored)**
   ```bash
   git check-ignore .env  # Should show: .env
   ```

2. ‚úÖ **Use environment variables in Cloud Run**
   - Simpler than Secret Manager for small projects
   - Easier to update

3. ‚úÖ **Verify .gitignore before every commit**
   ```bash
   git status | grep .env  # Should show nothing
   ```

4. ‚úÖ **Rotate secrets periodically**
   - JWT_SECRET: Every 90 days
   - OAuth secrets: Every 180 days
   - API keys: Every 90 days

---

### DON'Ts ‚ùå

1. ‚ùå **Never commit .env to git**
   - Contains all production secrets
   - Immediately compromises security

2. ‚ùå **Never hardcode secrets in code**
   - Use environment variables
   - Use process.env.VARIABLE_NAME

3. ‚ùå **Never mix Secret Manager and env vars**
   - Causes "cannot update" errors
   - Choose one method and stick with it

4. ‚ùå **Never skip environment variable verification**
   - Missing ONE var can break entire app
   - Always verify all 7 are set

---

## üìä Deployment History

### 2025-10-21: Initial Production Deployment

**Issues Encountered:**
1. Cloud Storage bucket didn't exist
2. Dependency version conflicts (Astro v5 + node v8)
3. Missing dependencies (@google-cloud/logging, error-reporting)
4. Wrong import paths (generateAIResponse)
5. Rollup bundling Google Cloud packages
6. Build script requiring .env.project in Docker
7. Incomplete environment variables
8. OAuth redirect URIs not configured

**Solutions Applied:**
1. Created gs://salfagpt-uploads bucket
2. Updated @astrojs/node to v9.0.0
3. Installed missing dependencies
4. Fixed import in chat.ts
5. Added ssr.external config
6. Separated build vs build:local scripts
7. Set all 7 environment variables
8. Configured OAuth redirect URIs in Google Console

**Result:** ‚úÖ Successful deployment, OAuth working, file uploads working

---

## üéì Key Learnings

### 1. Environment Variables Are Critical
- Missing ONE variable breaks the entire app
- Always clear and set all at once to avoid conflicts
- Verify after every deployment

### 2. OAuth Configuration Has Delays
- Redirect URI changes take 5 minutes to hours to propagate
- Plan ahead when changing URLs
- Test after waiting period

### 3. Build Process Differences
- Local: Uses .env files via load-env script
- Cloud Run: Uses --set-env-vars flag
- Don't mix the two approaches

### 4. Google Cloud SDKs Are External
- Never bundle @google-cloud/* packages
- Always add to ssr.external in vite config
- Prevents build errors and reduces bundle size

### 5. Secret Manager vs Env Vars
- Env vars: Simpler, easier to update
- Secret Manager: More secure, more complex
- Mixing them causes deployment errors

---

## üîó Related Rules

### Aligns With
- `.cursor/rules/alignment.mdc` - Graceful degradation, security
- `.cursor/rules/deployment.mdc` - General deployment rules
- `.cursor/rules/env.mdc` - Environment variable management
- `.cursor/rules/gcp-project-consistency.mdc` - Project ID consistency

### Extends
- `.cursor/rules/backend.mdc` - Backend architecture
- `.cursor/rules/firestore.mdc` - Database configuration

### References
- `docs/CLOUD_RUN_OAUTH_SETUP_COMPLETE.md` - Detailed setup guide
- `docs/LocalToProduction.md` - General deployment guide

---

## üìù Quick Reference Commands

### Deploy New Version
```bash
gcloud run deploy flow-chat --source . --project=salfagpt --region=us-central1
```

### Update Environment Variable
```bash
gcloud run services update flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --update-env-vars="VARIABLE_NAME=value"
```

### View Current Configuration
```bash
gcloud run services describe flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --format=json | jq '.spec.template.spec.containers[0].env'
```

### Check Logs
```bash
gcloud logging tail "resource.type=cloud_run_revision" \
  --project=salfagpt \
  --limit=20
```

### Rollback to Previous Revision
```bash
# List revisions
gcloud run revisions list \
  --service=flow-chat \
  --project=salfagpt \
  --region=us-central1

# Rollback to specific revision
gcloud run services update-traffic flow-chat \
  --to-revisions=flow-chat-00015-fmz=100 \
  --project=salfagpt \
  --region=us-central1
```

---

## ‚úÖ Success Criteria

A successful Cloud Run deployment should meet:

### Technical Requirements
- ‚úÖ `npm run build` succeeds locally
- ‚úÖ Cloud Run build succeeds
- ‚úÖ Service is accessible at URL
- ‚úÖ Health check returns "healthy"
- ‚úÖ No errors in Cloud Run logs

### Configuration Requirements
- ‚úÖ All 7 environment variables set
- ‚úÖ PUBLIC_BASE_URL matches actual service URL
- ‚úÖ GOOGLE_CLOUD_PROJECT matches project ID
- ‚úÖ NODE_ENV set to "production"

### OAuth Requirements
- ‚úÖ Authorized JavaScript Origins includes service URL
- ‚úÖ Authorized Redirect URIs includes /auth/callback
- ‚úÖ CLIENT_ID matches environment variable
- ‚úÖ CLIENT_SECRET matches environment variable

### Functionality Requirements
- ‚úÖ OAuth login works
- ‚úÖ File upload to Cloud Storage works
- ‚úÖ Chat with AI works
- ‚úÖ Data persists in Firestore
- ‚úÖ Users can create agents
- ‚úÖ Context sources load correctly

---

## üö® Common Errors & Solutions

### Error: "Cannot update environment variable [X] to string literal because it has already been set with a different type"

**Cause:** Mixing Secret Manager (valueFrom) with direct env vars (value).

**Solution:**
```bash
# Clear everything first
gcloud run services update flow-chat \
  --project=salfagpt \
  --region=us-central1 \
  --clear-env-vars \
  --clear-secrets

# Then set fresh
# (use --set-env-vars for all variables)
```

---

### Error: "invalid_client" in OAuth

**Cause:** GOOGLE_CLIENT_SECRET doesn't match the one in Google Console.

**Solution:**
1. Get correct secret from Google Console
2. Update .env file
3. Re-deploy with correct secret

---

### Error: "Missing required parameter: client_id"

**Cause:** GOOGLE_CLIENT_ID not set in Cloud Run OR OAuth redirect URI not configured.

**Solutions:**
1. Verify GOOGLE_CLIENT_ID is set:
   ```bash
   gcloud run services describe flow-chat ... | grep CLIENT_ID
   ```
2. Add redirect URI in Google Console
3. Wait 5-10 minutes for propagation

---

## üìö Documentation Index

### Setup Guides
- `docs/CLOUD_RUN_OAUTH_SETUP_COMPLETE.md` - Complete OAuth setup
- `docs/LocalToProduction.md` - Local to production guide
- `DEPLOYMENT_SUCCESS_2025-10-21.md` - Latest deployment

### Rules
- `.cursor/rules/deployment.mdc` - General deployment
- `.cursor/rules/env.mdc` - Environment variables
- `.cursor/rules/gcp-project-consistency.mdc` - Project ID
- `.cursor/rules/cloud-run-deployment.mdc` - THIS FILE

### Reference
- `.env.example` - Environment variable template
- `Dockerfile` - Container configuration
- `astro.config.mjs` - Build configuration

---

**Last Updated:** 2025-10-21  
**Version:** 1.0.0  
**Status:** ‚úÖ Production Ready  
**Project:** salfagpt  
**Service:** flow-chat  
**URL:** https://flow-chat-3snj65wckq-uc.a.run.app

---

**Remember:** Always verify ALL 7 environment variables are set. Missing even one will break the application. Use `--clear-env-vars` before setting to avoid type conflicts.
