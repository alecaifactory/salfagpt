---
alwaysApply: true
---

# Environment Variables Management - Flow Platform

## 🚨 CRITICAL: Environment Variable Consistency

This rule ensures environment variables are properly configured in both local development and production (Google Cloud Run) to prevent deployment failures and runtime errors.

---

## 🎯 Purpose

Environment variable mismatches are the **#1 cause of production failures**. This rule:
- Documents all required environment variables
- Provides verification procedures
- Prevents missing or misconfigured variables
- Ensures consistency between local and production

---

## 📋 Required Environment Variables

### Complete List (Must be in .env and Cloud Run)

| Variable | Type | Required | Source | Description |
|------|-----|-----|-----|-----|
| `GOOGLE_CLOUD_PROJECT` | Direct | ✅ Yes | .env | GCP Project ID |
| `GOOGLE_AI_API_KEY` | Secret | ✅ Yes | Secret Manager | Gemini AI API Key |
| `GOOGLE_CLIENT_ID` | Secret | ✅ Yes | Secret Manager | OAuth Client ID |
| `GOOGLE_CLIENT_SECRET` | Secret | ✅ Yes | Secret Manager | OAuth Client Secret |
| `JWT_SECRET` | Secret | ✅ Yes | Secret Manager | Session Token Secret |
| `PUBLIC_BASE_URL` | Direct | ✅ Yes | .env | Production URL |
| `NODE_ENV` | Direct | ✅ Yes | .env | Environment (production) |
| `SESSION_COOKIE_NAME` | Direct | ⚠️ Optional | .env | Cookie name (default: flow_session) |
| `SESSION_MAX_AGE` | Direct | ⚠️ Optional | .env | Session duration (default: 604800) |

---

## 🔐 Secret Manager vs Direct Environment Variables

### When to Use Secret Manager

**ALWAYS use Secret Manager for:**
- ✅ API Keys (`GOOGLE_AI_API_KEY`)
- ✅ OAuth Credentials (`GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET`)
- ✅ Signing Keys (`JWT_SECRET`)
- ✅ Database passwords
- ✅ Any sensitive data

**Why?**
- Secrets are encrypted at rest
- Access is logged and auditable
- Rotation is easier
- No secrets in code or logs

### When to Use Direct Environment Variables

**Use direct env vars for:**
- ✅ Project IDs (`GOOGLE_CLOUD_PROJECT`)
- ✅ Public URLs (`PUBLIC_BASE_URL`)
- ✅ Environment names (`NODE_ENV`)
- ✅ Non-sensitive configuration

---

## 🔍 Verification Procedures

### 1. Before Every Deployment

**Run the verification script:**
```bash
./scripts/verify-cloud-run-env.sh
```

**Expected Output:**
```
🔍 Verificando variables de entorno...

📁 Variables en .env local:
  ✅ GOOGLE_CLOUD_PROJECT
  ✅ GOOGLE_AI_API_KEY
  ✅ GOOGLE_CLIENT_ID
  ✅ GOOGLE_CLIENT_SECRET
  ✅ JWT_SECRET
  ✅ PUBLIC_BASE_URL
  ✅ NODE_ENV

☁️  Variables en Cloud Run:
  ✅ GOOGLE_CLOUD_PROJECT
  ✅ GOOGLE_AI_API_KEY (desde secret)
  ✅ GOOGLE_CLIENT_ID (desde secret)
  ✅ GOOGLE_CLIENT_SECRET (desde secret)
  ✅ JWT_SECRET (desde secret)
  ✅ PUBLIC_BASE_URL
  ✅ NODE_ENV

✅ Todas las variables críticas están configuradas
```

### 2. After Every Deployment

**Mandatory Checklist:**

```bash
# 1. Verify Cloud Run has all variables
gcloud run services describe flow-chat \
  --region=us-central1 \
  --project=gen-lang-client-0986191192 \
  --format="value(spec.template.spec.containers[0].env)"

# 2. Verify secrets are mounted
gcloud run services describe flow-chat \
  --region=us-central1 \
  --project=gen-lang-client-0986191192 \
  --format="value(spec.template.spec.containers[0].env)" | grep "secretKeyRef"

# 3. Test critical endpoints
# OAuth
curl -I "https://YOUR-SERVICE-URL/auth/google"

# Gemini AI
curl -X POST "https://YOUR-SERVICE-URL/api/conversations/temp-test/messages" \
  -H "Content-Type: application/json" \
  -d '{"userId":"test","message":"Hola","model":"gemini-2.5-flash"}'

# Firestore
curl "https://YOUR-SERVICE-URL/api/health/firestore"
```

---

## 🔧 Adding New Environment Variables

### Step-by-Step Process

**1. Add to Local .env File**
```bash
# Edit .env
echo "NEW_VARIABLE=value" >> .env
```

**2. Decide: Secret or Direct?**

**If Secret (sensitive data):**
```bash
# Create secret in Secret Manager
gcloud secrets create new-variable-secret \
  --data-file=- \
  --project=gen-lang-client-0986191192 <<< "your-secret-value"

# Grant service account access
gcloud secrets add-iam-policy-binding new-variable-secret \
  --member="serviceAccount:1030147139179-compute@developer.gserviceaccount.com" \
  --role="roles/secretmanager.secretAccessor" \
  --project=gen-lang-client-0986191192

# Mount in Cloud Run
gcloud run services update flow-chat \
  --region=us-central1 \
  --update-secrets="NEW_VARIABLE=new-variable-secret:latest" \
  --project=gen-lang-client-0986191192
```

**If Direct (non-sensitive):**
```bash
# Set directly in Cloud Run
gcloud run services update flow-chat \
  --region=us-central1 \
  --set-env-vars="NEW_VARIABLE=value" \
  --project=gen-lang-client-0986191192
```

**3. Update This Documentation**
- Add to the table above
- Update verification script
- Update deployment docs

**4. Update Code to Use It**
```typescript
// src/lib/config.ts
const NEW_VARIABLE = process.env.NEW_VARIABLE ||
  (typeof import.meta !== 'undefined' && import.meta.env
    ? import.meta.env.NEW_VARIABLE
    : undefined);
```

**5. Verify**
```bash
./scripts/verify-cloud-run-env.sh
```

---

## 🚨 Common Issues and Solutions

### Issue 1: Secret Not Found in Cloud Run

**Symptom:**
```
Error: Secret not found
```

**Solution:**
```bash
# 1. Verify secret exists
gcloud secrets list --project=gen-lang-client-0986191192 | grep your-secret

# 2. Verify version exists
gcloud secrets versions list your-secret --project=gen-lang-client-0986191192

# 3. Grant access
gcloud secrets add-iam-policy-binding your-secret \
  --member="serviceAccount:1030147139179-compute@developer.gserviceaccount.com" \
  --role="roles/secretmanager.secretAccessor" \
  --project=gen-lang-client-0986191192
```

---

### Issue 2: Variable Shows in List but Not Available at Runtime

**Symptom:**
```
console.log(process.env.YOUR_VAR); // undefined
```

**Causes & Solutions:**

**Cause 1: Using import.meta.env in Node.js context**
```typescript
// ❌ WRONG in Node.js (Cloud Run)
const apiKey = import.meta.env.GOOGLE_AI_API_KEY;

// ✅ CORRECT - Prioritize process.env
const apiKey = process.env.GOOGLE_AI_API_KEY ||
  (typeof import.meta !== 'undefined' && import.meta.env
    ? import.meta.env.GOOGLE_AI_API_KEY
    : undefined);
```

**Cause 2: Secret not mounted**
```bash
# Check if secret is mounted
gcloud run services describe flow-chat \
  --region=us-central1 \
  --project=gen-lang-client-0986191192 \
  --format="value(spec.template.spec.containers[0].env)" | grep YOUR_VAR
```

---

### Issue 3: OAuth Redirect URI Mismatch

**Symptom:**
```
Error: redirect_uri_mismatch
```

**Solution:**
```bash
# 1. Verify PUBLIC_BASE_URL matches production
gcloud run services describe flow-chat \
  --region=us-central1 \
  --project=gen-lang-client-0986191192 \
  --format="value(spec.template.spec.containers[0].env)" | grep PUBLIC_BASE_URL

# 2. Update if needed
gcloud run services update flow-chat \
  --region=us-central1 \
  --update-env-vars="PUBLIC_BASE_URL=https://YOUR-ACTUAL-URL.run.app" \
  --project=gen-lang-client-0986191192

# 3. Verify OAuth consent screen matches
# Go to: https://console.cloud.google.com/apis/credentials/consent
# Authorized domains should include: run.app
# Authorized redirect URIs should include: https://YOUR-URL.run.app/auth/google/callback
```

---

## 📝 Local .env File Template

```bash
# .env (DO NOT COMMIT TO GIT)

# ===== GCP Configuration =====
GOOGLE_CLOUD_PROJECT=gen-lang-client-0986191192

# ===== AI API Keys =====
GOOGLE_AI_API_KEY=AIzaSy...your-actual-key...

# ===== OAuth Configuration =====
GOOGLE_CLIENT_ID=1234567890-abcdefghijk.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=GOCSPX-your-actual-secret

# ===== Authentication =====
JWT_SECRET=your-jwt-secret-min-32-chars

# ===== Application Configuration =====
PUBLIC_BASE_URL=http://localhost:3000
NODE_ENV=development

# ===== Session Configuration (Optional) =====
SESSION_COOKIE_NAME=flow_session
SESSION_MAX_AGE=604800
```

---

## 🔒 Security Best Practices

### 1. Never Commit Secrets to Git

**Check .gitignore:**
```bash
# Verify .env is ignored
cat .gitignore | grep ".env"

# If not, add it
echo ".env" >> .gitignore
```

### 2. Rotate Secrets Regularly

**Recommended Schedule:**
- API Keys: Every 90 days
- OAuth Secrets: Every 180 days
- JWT Secrets: Every 90 days

**How to Rotate:**
```bash
# 1. Create new secret version
gcloud secrets versions add your-secret \
  --data-file=- \
  --project=gen-lang-client-0986191192 <<< "new-secret-value"

# 2. Cloud Run automatically uses :latest
# Or specify version:
gcloud run services update flow-chat \
  --region=us-central1 \
  --update-secrets="YOUR_VAR=your-secret:2" \
  --project=gen-lang-client-0986191192

# 3. Verify
curl "https://YOUR-SERVICE-URL/api/health"

# 4. Disable old version
gcloud secrets versions disable 1 \
  --secret=your-secret \
  --project=gen-lang-client-0986191192
```

### 3. Audit Secret Access

**Check who accessed secrets:**
```bash
gcloud logging read "protoPayload.serviceName=secretmanager.googleapis.com" \
  --limit=50 \
  --project=gen-lang-client-0986191192
```

---

## 🧪 Testing Environment Variables

### Local Development

```bash
# 1. Source .env
source .env

# 2. Verify variables are loaded
echo $GOOGLE_CLOUD_PROJECT
echo $GOOGLE_AI_API_KEY
echo $PUBLIC_BASE_URL

# 3. Run dev server
npm run dev

# 4. Test endpoints
curl http://localhost:3000/api/health/firestore
```

### Production (Cloud Run)

```bash
# 1. Deploy
gcloud run deploy flow-chat --source . --project=gen-lang-client-0986191192

# 2. Get service URL
SERVICE_URL=$(gcloud run services describe flow-chat \
  --region=us-central1 \
  --project=gen-lang-client-0986191192 \
  --format='value(status.url)')

# 3. Test OAuth
curl -I "$SERVICE_URL/auth/google"

# 4. Test Gemini AI
curl -X POST "$SERVICE_URL/api/conversations/temp-test/messages" \
  -H "Content-Type: application/json" \
  -d '{"userId":"test","message":"Hola","model":"gemini-2.5-flash"}'

# 5. Test Firestore
curl "$SERVICE_URL/api/health/firestore"
```

---

## 📊 Monitoring Environment Variables

### Cloud Run Logs

**Filter for environment variable issues:**
```bash
gcloud logging read "resource.type=cloud_run_revision AND \
  (textPayload=~'.*undefined.*' OR textPayload=~'.*not found.*' OR textPayload=~'.*missing.*')" \
  --limit=50 \
  --project=gen-lang-client-0986191192
```

### Health Check Endpoint

**Create a dedicated health check:**
```typescript
// src/pages/api/health/env.ts
import type { APIRoute } from 'astro';

export const GET: APIRoute = async () => {
  const requiredVars = [
    'GOOGLE_CLOUD_PROJECT',
    'GOOGLE_AI_API_KEY',
    'GOOGLE_CLIENT_ID',
    'GOOGLE_CLIENT_SECRET',
    'JWT_SECRET',
    'PUBLIC_BASE_URL',
    'NODE_ENV',
  ];

  const status: Record<string, boolean> = {};
  let allPresent = true;

  for (const varName of requiredVars) {
    const isPresent = !!process.env[varName];
    status[varName] = isPresent;
    if (!isPresent) allPresent = false;
  }

  return new Response(JSON.stringify({
    ok: allPresent,
    variables: status,
    timestamp: new Date().toISOString(),
  }), {
    status: allPresent ? 200 : 500,
    headers: { 'Content-Type': 'application/json' }
  });
};
```

**Test it:**
```bash
curl "https://YOUR-SERVICE-URL/api/health/env"
```

---

## 🚀 Deployment Integration

### Pre-Deployment Checklist

**Before running `gcloud run deploy`:**

```bash
# 1. Verify local .env is complete
./scripts/verify-cloud-run-env.sh

# 2. Verify secrets exist in Secret Manager
gcloud secrets list --project=gen-lang-client-0986191192

# 3. Verify service account permissions
gcloud projects get-iam-policy gen-lang-client-0986191192 \
  --flatten="bindings[].members" \
  --filter="bindings.members:1030147139179-compute@developer.gserviceaccount.com"

# 4. Build locally to catch errors
npm run build
```

### Post-Deployment Verification

**After `gcloud run deploy`:**

```bash
# 1. Verify all variables
./scripts/verify-cloud-run-env.sh

# 2. Run health checks
SERVICE_URL=$(gcloud run services describe flow-chat \
  --region=us-central1 \
  --project=gen-lang-client-0986191192 \
  --format='value(status.url)')

curl "$SERVICE_URL/api/health/firestore"
curl "$SERVICE_URL/api/health/env"

# 3. Test OAuth flow
echo "Test OAuth at: $SERVICE_URL/auth/google"

# 4. Test AI responses
curl -X POST "$SERVICE_URL/api/conversations/temp-test/messages" \
  -H "Content-Type: application/json" \
  -d '{"userId":"test","message":"Hola","model":"gemini-2.5-flash"}'

# 5. Check logs for errors
gcloud logging read "resource.type=cloud_run_revision" \
  --limit=20 \
  --project=gen-lang-client-0986191192
```

---

## 📖 Documentation References

### Internal Documentation
- `docs/DEPLOYMENT.md` - Complete deployment guide with environment variable setup
- `scripts/verify-cloud-run-env.sh` - Automated verification script
- `.env.example` - Template for local .env file
- `docs/fixes/oauth-client-id-fix-2025-01-12.md` - OAuth variable fix case study
- `docs/fixes/gemini-production-fix-2025-01-12.md` - AI API key fix case study

### External Resources
- [Cloud Run Environment Variables](https://cloud.google.com/run/docs/configuring/environment-variables)
- [Secret Manager](https://cloud.google.com/secret-manager/docs)
- [Cloud Run IAM](https://cloud.google.com/run/docs/securing/service-identity)

---

## ✅ Success Criteria

A properly configured environment should:

1. **Completeness**
   - ✅ All required variables present in .env
   - ✅ All secrets in Secret Manager
   - ✅ All variables mounted in Cloud Run
   - ✅ Service account has access to all secrets

2. **Consistency**
   - ✅ Local .env matches Cloud Run config
   - ✅ Variable names consistent across environments
   - ✅ Values appropriate for each environment

3. **Security**
   - ✅ Secrets not in .env committed to git
   - ✅ Secrets in Secret Manager encrypted
   - ✅ Access to secrets is logged
   - ✅ Regular rotation schedule followed

4. **Verification**
   - ✅ Verification script passes
   - ✅ All health checks pass
   - ✅ OAuth flow works
   - ✅ AI responses work
   - ✅ Firestore queries work

5. **Documentation**
   - ✅ All variables documented in this file
   - ✅ All changes tracked in deployment docs
   - ✅ All issues have fix documents

---

## 🔄 Maintenance

### Weekly
- [ ] Run verification script
- [ ] Check Cloud Run logs for env-related errors
- [ ] Test critical endpoints

### Monthly
- [ ] Review secret rotation schedule
- [ ] Audit secret access logs
- [ ] Update documentation if variables changed

### Quarterly
- [ ] Rotate API keys
- [ ] Rotate JWT secrets
- [ ] Review and remove unused variables

---

**Last Updated**: 2025-01-12  
**Version**: 1.0.0  
**Status**: ✅ Production Ready  
**Project**: Flow (gen-lang-client-0986191192)

---

**Remember:** Environment variable issues cause 90% of production failures. Always verify before and after deployment.
