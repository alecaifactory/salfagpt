---
alwaysApply: true
---

# Frontend Architecture & Best Practices - Flow Platform

## üéØ Purpose

This rule documents the complete frontend architecture, component patterns, state management, and best practices for the Flow platform. It ensures smooth development, consistent UI, and seamless data persistence with backend services.

---

## üèóÔ∏è Frontend Architecture Overview

### Technology Stack

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    FLOW FRONTEND                        ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                                         ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ    Astro     ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   React 18   ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Tailwind ‚îÇ ‚îÇ
‚îÇ  ‚îÇ    5.1.x     ‚îÇ    ‚îÇ Components   ‚îÇ    ‚îÇ  v3.4.x  ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ         ‚îÇ                    ‚îÇ                  ‚îÇ       ‚îÇ
‚îÇ         ‚îÇ                    ‚îÇ                  ‚îÇ       ‚îÇ
‚îÇ         ‚ñº                    ‚ñº                  ‚ñº       ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ API Routes   ‚îÇ    ‚îÇ  State Mgmt  ‚îÇ    ‚îÇ  Lucide  ‚îÇ ‚îÇ
‚îÇ  ‚îÇ  (Backend)   ‚îÇ    ‚îÇ  (Hooks)     ‚îÇ    ‚îÇ  Icons   ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### Core Components

1. **Astro Pages** (`src/pages/`)
   - SSR pages
   - Client-side routing
   - API route integration

2. **React Components** (`src/components/`)
   - Interactive UI elements
   - State management with hooks
   - Type-safe with TypeScript

3. **Tailwind CSS** (`src/styles/`)
   - Utility-first styling
   - Custom design system
   - Responsive by default

4. **Lucide Icons**
   - Consistent icon system
   - Tree-shakeable
   - Accessible

---

## üìÅ Component Structure

```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ChatInterfaceWorking.tsx      # Main chat UI (production)
‚îÇ   ‚îú‚îÄ‚îÄ MessageRenderer.tsx           # Markdown rendering
‚îÇ   ‚îú‚îÄ‚îÄ ContextManager.tsx            # Context sources panel
‚îÇ   ‚îú‚îÄ‚îÄ ContextSourceSettingsModal.tsx # Source settings/re-extraction
‚îÇ   ‚îú‚îÄ‚îÄ AddSourceModal.tsx            # Add new sources
‚îÇ   ‚îú‚îÄ‚îÄ AdminPanel.tsx                # User management
‚îÇ   ‚îú‚îÄ‚îÄ ContextManagementDashboard.tsx # Admin context management
‚îÇ   ‚îú‚îÄ‚îÄ UserSettingsModal.tsx         # User preferences
‚îÇ   ‚îú‚îÄ‚îÄ WorkflowConfigModal.tsx       # Workflow settings
‚îÇ   ‚îî‚îÄ‚îÄ ... (other components)
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ index.astro                   # Landing page
‚îÇ   ‚îú‚îÄ‚îÄ chat.astro                    # Main chat page
‚îÇ   ‚îú‚îÄ‚îÄ admin.astro                   # Admin panel
‚îÇ   ‚îú‚îÄ‚îÄ expertos.astro                # Expert validation
‚îÇ   ‚îî‚îÄ‚îÄ api/                          # Backend API routes
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ firestore.ts                  # Database operations
‚îÇ   ‚îú‚îÄ‚îÄ gemini.ts                     # AI integration
‚îÇ   ‚îú‚îÄ‚îÄ auth.ts                       # Authentication
‚îÇ   ‚îî‚îÄ‚îÄ ... (utilities)
‚îî‚îÄ‚îÄ styles/
    ‚îî‚îÄ‚îÄ global.css                    # Global styles
```

---

## üé® Design System

### Color Palette

```typescript
// Primary Colors
blue: {
  50: '#eff6ff',
  100: '#dbeafe',
  200: '#bfdbfe',
  // ...
  600: '#2563eb',  // Primary action
  700: '#1d4ed8',  // Hover state
  800: '#1e40af',
  900: '#1e3a8a',
}

// Status Colors
green: '#10b981',    // Success, Active
yellow: '#f59e0b',   // Warning
red: '#ef4444',      // Error
purple: '#a855f7',   // Pro model
```

### Typography Scale

```css
text-xs: 0.75rem (12px)     /* Metadata, badges */
text-sm: 0.875rem (14px)    /* Body text, buttons */
text-base: 1rem (16px)      /* Default */
text-lg: 1.125rem (18px)    /* Headings */
text-xl: 1.25rem (20px)     /* Large headings */
text-2xl: 1.5rem (24px)     /* Hero text */
```

### Spacing System

```css
p-1: 0.25rem (4px)
p-2: 0.5rem (8px)
p-3: 0.75rem (12px)
p-4: 1rem (16px)
p-5: 1.25rem (20px)
p-6: 1.5rem (24px)
```

### Border Radius

```css
rounded-sm: 0.125rem (2px)
rounded: 0.25rem (4px)
rounded-md: 0.375rem (6px)
rounded-lg: 0.5rem (8px)
rounded-xl: 0.75rem (12px)
rounded-full: 9999px (circle)
```

---

## üö® Critical Frontend Rules

### 1. ‚úÖ ALWAYS Persist State to Backend

**‚ùå WRONG:**
```typescript
// Data only in local state - lost on refresh
const [conversations, setConversations] = useState([]);

function createConversation(title: string) {
  const newConv = { id: Date.now(), title, messages: [] };
  setConversations([newConv, ...conversations]); // ‚ùå Only in memory
}
```

**‚úÖ CORRECT:**
```typescript
// Data persisted to Firestore via API
const [conversations, setConversations] = useState([]);

async function createConversation(title: string) {
  // 1. Call backend API
  const response = await fetch('/api/conversations', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, title })
  });
  
  const newConv = await response.json();
  
  // 2. Update local state (optimistic UI)
  setConversations([newConv, ...conversations]);
}

// 3. Load from backend on mount
useEffect(() => {
  loadConversations();
}, []);

async function loadConversations() {
  const response = await fetch(`/api/conversations?userId=${userId}`);
  const data = await response.json();
  setConversations(data);
}
```

**Why?**
- Data survives page refresh
- Syncs across devices/tabs
- Production-ready from day one
- No data loss

---

### 2. ‚úÖ ALWAYS Use TypeScript Interfaces

**‚ùå WRONG:**
```typescript
function MessageBubble({ msg }) {  // ‚ùå No types
  return <div>{msg.content}</div>;
}
```

**‚úÖ CORRECT:**
```typescript
interface Message {
  id: string;
  conversationId: string;
  userId: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
  tokenCount: number;
}

interface MessageBubbleProps {
  message: Message;
  onEdit?: (id: string) => void;
}

function MessageBubble({ message, onEdit }: MessageBubbleProps) {
  return (
    <div className="p-4 rounded-lg bg-white">
      {message.content}
    </div>
  );
}
```

**Why?**
- Catches errors at compile time
- Better IDE autocomplete
- Self-documenting code
- Easier refactoring

---

### 3. ‚úÖ ALWAYS Handle Loading & Error States

**‚ùå WRONG:**
```typescript
function ConversationList() {
  const [conversations, setConversations] = useState([]);
  
  useEffect(() => {
    fetch('/api/conversations')
      .then(r => r.json())
      .then(setConversations);
    // ‚ùå No loading state, no error handling
  }, []);
  
  return (
    <div>
      {conversations.map(conv => <div key={conv.id}>{conv.title}</div>)}
    </div>
  );
}
```

**‚úÖ CORRECT:**
```typescript
function ConversationList() {
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    loadConversations();
  }, []);
  
  async function loadConversations() {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/conversations');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      setConversations(data);
    } catch (err) {
      console.error('Failed to load conversations:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
      setConversations([]); // ‚úÖ Show empty, keep trying
    } finally {
      setLoading(false);
    }
  }
  
  if (loading) {
    return <div className="flex items-center gap-2">
      <Loader2 className="w-5 h-5 animate-spin" />
      <span>Cargando...</span>
    </div>;
  }
  
  if (error) {
    return <div className="bg-red-50 border border-red-200 rounded p-4">
      <p className="text-red-800 font-semibold">Error: {error}</p>
      <button onClick={loadConversations} className="mt-2 text-red-600 hover:underline">
        Reintentar
      </button>
    </div>;
  }
  
  if (conversations.length === 0) {
    return <div className="text-center text-slate-500 py-8">
      <p>No hay conversaciones</p>
      <button onClick={createNewConversation} className="mt-2 text-blue-600 hover:underline">
        Crear primera conversaci√≥n
      </button>
    </div>;
  }
  
  return (
    <div className="space-y-2">
      {conversations.map(conv => (
        <ConversationCard key={conv.id} conversation={conv} />
      ))}
    </div>
  );
}
```

**Why?**
- Better user experience
- Clear feedback
- Graceful degradation
- Easier debugging

---

### 4. ‚úÖ NEVER Mix Client & Server State

**‚ùå WRONG:**
```typescript
function ChatInterface() {
  const [conversations, setConversations] = useState([]);
  const [tempConversation, setTempConversation] = useState(null);
  
  // ‚ùå Mixing temporary and persisted conversations
  const allConversations = tempConversation 
    ? [tempConversation, ...conversations]
    : conversations;
}
```

**‚úÖ CORRECT:**
```typescript
function ChatInterface() {
  // Server state (persisted in Firestore)
  const [conversations, setConversations] = useState<Conversation[]>([]);
  
  // UI state (ephemeral)
  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  
  // Derived state
  const selectedConversation = conversations.find(
    c => c.id === selectedConversationId
  );
  
  async function createConversation(title: string) {
    setIsCreating(true);
    
    try {
      const response = await fetch('/api/conversations', {
        method: 'POST',
        body: JSON.stringify({ userId, title })
      });
      
      const newConv = await response.json();
      
      // ‚úÖ Add to server state
      setConversations(prev => [newConv, ...prev]);
      
      // ‚úÖ Update UI state
      setSelectedConversationId(newConv.id);
    } finally {
      setIsCreating(false);
    }
  }
}
```

**Why?**
- Clear separation of concerns
- Easier to reason about data flow
- Prevents sync issues
- Simplifies testing

---

### 5. ‚úÖ ALWAYS Use Proper React Hooks Patterns

**‚ùå WRONG:**
```typescript
function ChatMessages({ conversationId }) {
  const [messages, setMessages] = useState([]);
  
  // ‚ùå Missing dependency, infinite loop risk
  useEffect(() => {
    loadMessages(conversationId);
  }, []);
  
  // ‚ùå Not cleaning up
  useEffect(() => {
    const interval = setInterval(pollMessages, 5000);
  }, [conversationId]);
}
```

**‚úÖ CORRECT:**
```typescript
function ChatMessages({ conversationId }: { conversationId: string }) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [loading, setLoading] = useState(false);
  
  // ‚úÖ Correct dependencies
  useEffect(() => {
    loadMessages(conversationId);
  }, [conversationId]); // Re-load when conversation changes
  
  // ‚úÖ Cleanup function
  useEffect(() => {
    const interval = setInterval(() => {
      pollNewMessages(conversationId);
    }, 5000);
    
    return () => clearInterval(interval); // ‚úÖ Cleanup on unmount
  }, [conversationId]);
  
  // ‚úÖ Ref for auto-scroll
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]); // Scroll when messages change
  
  async function loadMessages(convId: string) {
    setLoading(true);
    try {
      const response = await fetch(`/api/conversations/${convId}/messages`);
      const data = await response.json();
      setMessages(data);
    } finally {
      setLoading(false);
    }
  }
  
  return (
    <div className="flex-1 overflow-y-auto p-6">
      {messages.map(msg => (
        <MessageBubble key={msg.id} message={msg} />
      ))}
      <div ref={messagesEndRef} />
    </div>
  );
}
```

**Why?**
- Prevents memory leaks
- Correct re-rendering
- Proper cleanup
- Better performance

---

## üì° API Integration Patterns

### Fetch Wrapper

```typescript
// src/lib/api.ts
export class APIError extends Error {
  constructor(
    message: string,
    public status: number,
    public details?: string
  ) {
    super(message);
    this.name = 'APIError';
  }
}

export async function fetchAPI<T>(
  url: string,
  options?: RequestInit
): Promise<T> {
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new APIError(
        errorData.error || `HTTP ${response.status}`,
        response.status,
        errorData.details
      );
    }

    return await response.json();
  } catch (error) {
    if (error instanceof APIError) throw error;
    
    throw new APIError(
      'Network error',
      0,
      error instanceof Error ? error.message : 'Unknown error'
    );
  }
}
```

### Usage Example

```typescript
import { fetchAPI, APIError } from '../lib/api';

async function createConversation(title: string) {
  try {
    const newConv = await fetchAPI<Conversation>('/api/conversations', {
      method: 'POST',
      body: JSON.stringify({ userId, title })
    });
    
    setConversations(prev => [newConv, ...prev]);
    return newConv;
  } catch (error) {
    if (error instanceof APIError) {
      if (error.status === 401) {
        // Redirect to login
        window.location.href = '/auth/login';
      } else {
        setError(error.message);
      }
    } else {
      setError('Failed to create conversation');
    }
  }
}
```

---

## üîÑ State Management Patterns

### Local Component State

```typescript
// For UI-only state (open/closed, selected tab, etc.)
const [isOpen, setIsOpen] = useState(false);
const [selectedTab, setSelectedTab] = useState<'all' | 'active'>('all');
```

### Server State

```typescript
// For data from backend (conversations, messages, etc.)
const [conversations, setConversations] = useState<Conversation[]>([]);

useEffect(() => {
  loadConversations();
}, [userId]);
```

### Derived State

```typescript
// Computed from other state - DON'T store separately
const activeConversations = conversations.filter(c => c.status === 'active');
const selectedConversation = conversations.find(c => c.id === selectedId);
```

### Context for Global State

```typescript
// For app-wide state (user, theme, etc.)
interface UserContextType {
  user: User | null;
  loading: boolean;
  login: (credentials: Credentials) => Promise<void>;
  logout: () => Promise<void>;
}

const UserContext = createContext<UserContextType | null>(null);

export function UserProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    loadUser();
  }, []);
  
  const value = {
    user,
    loading,
    login,
    logout,
  };
  
  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
}

export function useUser() {
  const context = useContext(UserContext);
  if (!context) throw new Error('useUser must be used within UserProvider');
  return context;
}
```

---

## üé® Component Patterns

### Button Component

```typescript
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
  disabled?: boolean;
  children: React.ReactNode;
  onClick?: () => void;
}

function Button({
  variant = 'primary',
  size = 'md',
  loading = false,
  disabled = false,
  children,
  onClick,
}: ButtonProps) {
  const baseClasses = 'rounded-lg font-medium transition-colors flex items-center gap-2';
  
  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 disabled:bg-slate-300',
    secondary: 'bg-white text-slate-700 border border-slate-300 hover:bg-slate-50',
    danger: 'bg-red-600 text-white hover:bg-red-700',
  };
  
  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg',
  };
  
  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`}
      disabled={disabled || loading}
      onClick={onClick}
    >
      {loading && <Loader2 className="w-5 h-5 animate-spin" />}
      {children}
    </button>
  );
}
```

### Input Component

```typescript
interface InputProps {
  label: string;
  type?: 'text' | 'email' | 'password';
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  error?: string;
  required?: boolean;
}

function Input({
  label,
  type = 'text',
  value,
  onChange,
  placeholder,
  error,
  required = false,
}: InputProps) {
  return (
    <div className="space-y-1">
      <label className="block text-sm font-medium text-slate-700">
        {label}
        {required && <span className="text-red-600 ml-1">*</span>}
      </label>
      <input
        type={type}
        value={value}
        onChange={e => onChange(e.target.value)}
        placeholder={placeholder}
        className={`
          w-full px-4 py-2 border rounded-lg
          focus:ring-2 focus:ring-blue-500 focus:border-transparent
          ${error ? 'border-red-300' : 'border-slate-300'}
        `}
      />
      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}
    </div>
  );
}
```

### Modal Component

```typescript
interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  footer?: React.ReactNode;
}

function Modal({ isOpen, onClose, title, children, footer }: ModalProps) {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    
    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden';
    }
    
    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);
  
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      {/* Backdrop */}
      <div
        className="fixed inset-0 bg-black bg-opacity-50"
        onClick={onClose}
      />
      
      {/* Modal */}
      <div className="flex min-h-full items-center justify-center p-4">
        <div className="relative bg-white rounded-xl shadow-2xl max-w-2xl w-full">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-slate-200">
            <h2 className="text-xl font-bold text-slate-800">{title}</h2>
            <button
              onClick={onClose}
              className="text-slate-400 hover:text-slate-600"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          {/* Content */}
          <div className="p-6">
            {children}
          </div>
          
          {/* Footer */}
          {footer && (
            <div className="p-6 border-t border-slate-200">
              {footer}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
```

---

## üéØ Performance Optimization

### Memoization

```typescript
// Expensive computation - memoize result
const expensiveValue = useMemo(() => {
  return conversations
    .filter(c => c.status === 'active')
    .sort((a, b) => b.lastMessageAt.getTime() - a.lastMessageAt.getTime());
}, [conversations]);

// Callback passed to children - memoize to prevent re-renders
const handleConversationClick = useCallback((id: string) => {
  setSelectedConversationId(id);
  loadMessages(id);
}, []);

// Component that receives props - memoize to prevent unnecessary re-renders
const ConversationCard = memo(function ConversationCard({ 
  conversation,
  onClick 
}: ConversationCardProps) {
  return (
    <button onClick={() => onClick(conversation.id)}>
      {conversation.title}
    </button>
  );
});
```

### Lazy Loading

```typescript
import { lazy, Suspense } from 'react';

// Lazy load heavy components
const AdminPanel = lazy(() => import('./AdminPanel'));
const AnalyticsDashboard = lazy(() => import('./AnalyticsDashboard'));

function App() {
  return (
    <Suspense fallback={<Loader />}>
      <AdminPanel />
    </Suspense>
  );
}
```

### Virtual Scrolling (for long lists)

```typescript
import { useVirtualizer } from '@tanstack/react-virtual';

function MessageList({ messages }: { messages: Message[] }) {
  const parentRef = useRef<HTMLDivElement>(null);
  
  const virtualizer = useVirtualizer({
    count: messages.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 100, // Estimated message height
  });
  
  return (
    <div ref={parentRef} className="h-full overflow-auto">
      <div
        style={{
          height: `${virtualizer.getTotalSize()}px`,
          position: 'relative',
        }}
      >
        {virtualizer.getVirtualItems().map(virtualRow => (
          <div
            key={virtualRow.index}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              transform: `translateY(${virtualRow.start}px)`,
            }}
          >
            <MessageBubble message={messages[virtualRow.index]} />
          </div>
        ))}
      </div>
    </div>
  );
}
```

---

## üõ°Ô∏è Error Boundaries

```typescript
import { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
    // Report to error tracking service (e.g., Sentry)
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="min-h-screen flex items-center justify-center bg-slate-50">
          <div className="bg-white rounded-xl shadow-lg p-8 max-w-md">
            <h2 className="text-2xl font-bold text-red-600 mb-4">
              Algo sali√≥ mal
            </h2>
            <p className="text-slate-600 mb-4">
              Ocurri√≥ un error inesperado. Por favor, recarga la p√°gina.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Recargar P√°gina
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Usage
function App() {
  return (
    <ErrorBoundary>
      <ChatInterface />
    </ErrorBoundary>
  );
}
```

---

## üß™ Testing Strategies

### Component Testing

```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button', () => {
  it('renders children correctly', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });
  
  it('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
  
  it('disables button when loading', () => {
    render(<Button loading>Click me</Button>);
    expect(screen.getByRole('button')).toBeDisabled();
  });
});
```

### Hook Testing

```typescript
import { renderHook, act } from '@testing-library/react';
import { useCounter } from './useCounter';

describe('useCounter', () => {
  it('initializes with default value', () => {
    const { result } = renderHook(() => useCounter());
    expect(result.current.count).toBe(0);
  });
  
  it('increments count', () => {
    const { result } = renderHook(() => useCounter());
    
    act(() => {
      result.current.increment();
    });
    
    expect(result.current.count).toBe(1);
  });
});
```

### Integration Testing

```typescript
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { ChatInterface } from './ChatInterface';

describe('ChatInterface', () => {
  it('loads and displays conversations', async () => {
    render(<ChatInterface userId="user123" />);
    
    // Wait for conversations to load
    await waitFor(() => {
      expect(screen.getByText('Test Conversation')).toBeInTheDocument();
    });
  });
  
  it('creates new conversation when button clicked', async () => {
    const user = userEvent.setup();
    render(<ChatInterface userId="user123" />);
    
    await user.click(screen.getByText('Nuevo Agente'));
    
    await waitFor(() => {
      expect(screen.getByText(/Nuevo Agente/)).toBeInTheDocument();
    });
  });
});
```

---

## üì± Responsive Design

### Mobile-First Approach

```typescript
function ResponsiveLayout() {
  return (
    <div className="
      flex flex-col               /* Mobile: Stack vertically */
      md:flex-row                 /* Tablet+: Side by side */
      gap-4                       /* Consistent spacing */
    ">
      <aside className="
        w-full                    /* Mobile: Full width */
        md:w-64                   /* Tablet+: Fixed sidebar */
        lg:w-80                   /* Desktop: Wider sidebar */
      ">
        <Sidebar />
      </aside>
      
      <main className="
        flex-1                    /* Take remaining space */
        min-w-0                   /* Prevent overflow */
      ">
        <ChatArea />
      </main>
    </div>
  );
}
```

### Breakpoint Hook

```typescript
import { useState, useEffect } from 'react';

function useMediaQuery(query: string): boolean {
  const [matches, setMatches] = useState(false);

  useEffect(() => {
    const media = window.matchMedia(query);
    setMatches(media.matches);

    const listener = () => setMatches(media.matches);
    media.addEventListener('change', listener);
    
    return () => media.removeEventListener('change', listener);
  }, [query]);

  return matches;
}

// Usage
function MyComponent() {
  const isMobile = useMediaQuery('(max-width: 768px)');
  const isDesktop = useMediaQuery('(min-width: 1024px)');
  
  return (
    <div>
      {isMobile && <MobileNav />}
      {isDesktop && <DesktopNav />}
    </div>
  );
}
```

---

## üîê Security Best Practices

### Sanitize User Input

```typescript
import DOMPurify from 'dompurify';

function renderUserContent(content: string) {
  // ‚ùå NEVER do this - XSS vulnerability
  // return <div dangerouslySetInnerHTML={{ __html: content }} />;
  
  // ‚úÖ Sanitize first
  const cleanContent = DOMPurify.sanitize(content);
  return <div dangerouslySetInnerHTML={{ __html: cleanContent }} />;
}
```

### Secure Token Storage

```typescript
// ‚úÖ Store JWT in HTTP-only cookie (handled by backend)
// ‚ùå NEVER store sensitive tokens in localStorage

// For client-side session state
interface SessionState {
  userId: string;
  userName: string;
  // No sensitive data!
}

const sessionState: SessionState = {
  userId: user.id,
  userName: user.name,
};
localStorage.setItem('session', JSON.stringify(sessionState));
```

### CSRF Protection

```typescript
// Backend sets CSRF token in cookie
// Frontend includes it in requests
async function fetchWithCSRF(url: string, options: RequestInit = {}) {
  const csrfToken = getCookie('csrf_token');
  
  return fetch(url, {
    ...options,
    headers: {
      ...options.headers,
      'X-CSRF-Token': csrfToken,
    },
  });
}
```

---

## üìö Key Libraries & Dependencies

### Core Dependencies

```json
{
  "dependencies": {
    "astro": "^5.1.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "@astrojs/node": "^8.0.0",
    "@astrojs/react": "^3.0.0",
    "tailwindcss": "^3.4.17",
    "lucide-react": "latest",
    "react-markdown": "^9.0.0",
    "remark-gfm": "^4.0.0",
    "rehype-raw": "^7.0.0",
    "react-syntax-highlighter": "^15.5.0"
  },
  "devDependencies": {
    "@types/react": "^18.3.0",
    "@types/react-dom": "^18.3.0",
    "typescript": "^5.3.0"
  }
}
```

### Why These Versions?

- **Tailwind v3.4.x**: Stable, proven (v4 is experimental)
- **React 18.3**: Latest stable with concurrent features
- **Astro 5.1**: Latest with performance improvements
- **TypeScript 5.3**: Latest stable type checking

---

## üîÑ Data Flow (Frontend ‚Üî Backend)

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ USER ACTION                                      ‚îÇ
‚îÇ (Click "Send Message")                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
              ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ REACT COMPONENT                                  ‚îÇ
‚îÇ ‚Ä¢ Validate input                                 ‚îÇ
‚îÇ ‚Ä¢ Show loading state                             ‚îÇ
‚îÇ ‚Ä¢ setLoading(true)                               ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
              ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ API CALL (fetch)                                 ‚îÇ
‚îÇ POST /api/conversations/{id}/messages            ‚îÇ
‚îÇ Body: { userId, message, model, ... }           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
              ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ BACKEND (Astro API Route)                        ‚îÇ
‚îÇ ‚Ä¢ Authenticate user                              ‚îÇ
‚îÇ ‚Ä¢ Validate input                                 ‚îÇ
‚îÇ ‚Ä¢ Call Gemini AI                                 ‚îÇ
‚îÇ ‚Ä¢ Save to Firestore                              ‚îÇ
‚îÇ ‚Ä¢ Return response                                ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
              ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ RESPONSE HANDLING                                ‚îÇ
‚îÇ ‚Ä¢ Update messages state                          ‚îÇ
‚îÇ ‚Ä¢ Update context logs                            ‚îÇ
‚îÇ ‚Ä¢ setLoading(false)                              ‚îÇ
‚îÇ ‚Ä¢ Scroll to new message                          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
              ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ UI UPDATE                                        ‚îÇ
‚îÇ ‚Ä¢ Messages re-render                             ‚îÇ
‚îÇ ‚Ä¢ Context stats update                           ‚îÇ
‚îÇ ‚Ä¢ Input clears                                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## ‚úÖ Pre-Deployment Checklist

### Code Quality

- [ ] `npm run type-check` passes (0 errors)
- [ ] `npm run build` succeeds
- [ ] No console errors in browser
- [ ] No React warnings in console
- [ ] All TODOs resolved or documented

### Functionality

- [ ] All features work as expected
- [ ] Loading states show correctly
- [ ] Error states display properly
- [ ] Empty states are informative
- [ ] Forms validate inputs
- [ ] Buttons disable during loading
- [ ] Modals close on Escape
- [ ] Links open in correct windows

### Data Persistence

- [ ] Data saves to Firestore via API
- [ ] Data loads on page refresh
- [ ] No data loss on browser close
- [ ] Optimistic UI updates work
- [ ] Error recovery works

### Performance

- [ ] Page loads in < 3 seconds
- [ ] No unnecessary re-renders
- [ ] Images are optimized
- [ ] Bundle size is reasonable
- [ ] Smooth 60fps animations

### Accessibility

- [ ] Keyboard navigation works
- [ ] Focus states are visible
- [ ] ARIA labels present
- [ ] Color contrast meets WCAG
- [ ] Screen reader friendly

### Responsive Design

- [ ] Works on mobile (< 768px)
- [ ] Works on tablet (768-1024px)
- [ ] Works on desktop (> 1024px)
- [ ] Touch targets are 44x44px min
- [ ] Text is readable on all sizes

---

## üöÄ Deployment

### Build Process

```bash
# 1. Type check
npm run type-check

# 2. Build
npm run build

# 3. Test build locally
npm run preview

# 4. Deploy (see backend.mdc for deployment)
```

### Environment Variables (Frontend)

```bash
# .env (for Astro build)
PUBLIC_BASE_URL=https://your-domain.com
GOOGLE_CLOUD_PROJECT=gen-lang-client-0986191192
```

---

## üìä Success Metrics

A well-implemented frontend should achieve:

1. **Performance**
   - ‚úÖ First Contentful Paint < 1.5s
   - ‚úÖ Time to Interactive < 3s
   - ‚úÖ Lighthouse score > 90
   - ‚úÖ Bundle size < 300KB gzipped

2. **User Experience**
   - ‚úÖ Zero layout shift (CLS < 0.1)
   - ‚úÖ Smooth 60fps scrolling
   - ‚úÖ Instant feedback on interactions
   - ‚úÖ Clear error messages

3. **Code Quality**
   - ‚úÖ 0 TypeScript errors
   - ‚úÖ 0 React warnings
   - ‚úÖ 100% type coverage
   - ‚úÖ Consistent code style

4. **Reliability**
   - ‚úÖ No data loss
   - ‚úÖ Graceful error handling
   - ‚úÖ Offline-ready (with error messages)
   - ‚úÖ Cross-browser compatible

---

## üìö Reference Documentation

### Internal Docs
- `.cursor/rules/ui.mdc` - Complete UI component documentation
- `.cursor/rules/backend.mdc` - Backend integration guide
- `docs/CHAT_INTEGRATION_LESSONS.md` - Lessons learned
- `MARKDOWN_FEATURES_GUIDE.md` - Markdown rendering guide
- `TEST_ERROR_HANDLING.md` - Error handling testing

### External Docs
- [Astro Documentation](https://docs.astro.build/)
- [React Documentation](https://react.dev/)
- [Tailwind CSS](https://tailwindcss.com/docs)
- [Lucide Icons](https://lucide.dev/)
- [TypeScript Handbook](https://www.typescriptlang.org/docs/)

---

**Last Updated**: 2025-10-12
**Version**: 2.0.0
**Status**: ‚úÖ Production Ready
**Framework**: Astro 5.1.x + React 18.3.x + Tailwind CSS v3.4.x
