rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // =====================================================
    // PRODUCTION SECURITY RULES
    // Complete user isolation with role-based permissions
    // Last Updated: 2025-10-17
    // =====================================================
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function hasRole(role) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // =====================================================
    // CONVERSATIONS - User isolation
    // =====================================================
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // =====================================================
    // MESSAGES - User isolation via conversation
    // =====================================================
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      allow update: if false; // Messages are immutable
      
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // =====================================================
    // CONTEXT SOURCES - User isolation with agent assignment
    // =====================================================
    match /context_sources/{sourceId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // =====================================================
    // USER SETTINGS - Own data only
    // =====================================================
    match /user_settings/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // =====================================================
    // AGENT CONFIGS - Own data only
    // =====================================================
    match /agent_configs/{configId} {
      allow read, write: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
    }
    
    // =====================================================
    // CONVERSATION CONTEXT - Own data only
    // =====================================================
    match /conversation_context/{contextId} {
      allow read, write: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
    }
    
    // =====================================================
    // WORKFLOW CONFIGS - Own data only
    // =====================================================
    match /workflow_configs/{configId} {
      allow read, write: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
    }
    
    // =====================================================
    // USAGE LOGS - Read own, admins read all
    // =====================================================
    match /usage_logs/{logId} {
      allow read: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
      
      allow create: if isAuthenticated();
      
      allow update, delete: if false; // Immutable
    }
    
    // =====================================================
    // USERS - Read own profile, admins manage all
    // =====================================================
    match /users/{userId} {
      // Read own profile or if admin
      allow read: if isAuthenticated() && 
                    (isOwner(userId) || isAdmin());
      
      // Only admins can create users
      allow create: if isAdmin();
      
      // Users can update own basic info, admins can update anything
      allow update: if isAuthenticated() && (
        (isOwner(userId) && 
         !('role' in request.resource.data.diff(resource.data)) &&
         !('permissions' in request.resource.data.diff(resource.data))) ||
        isAdmin()
      );
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // =====================================================
    // FOLDERS - User isolation
    // =====================================================
    match /folders/{folderId} {
      allow read, write: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
    }
    
    // =====================================================
    // GROUPS - Member access
    // =====================================================
    match /groups/{groupId} {
      allow read: if isAuthenticated() && 
                    (request.auth.uid in resource.data.members || isAdmin());
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && 
                      (request.auth.uid in resource.data.members || isAdmin());
      
      allow delete: if isAuthenticated() && 
                      (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // =====================================================
    // CONTEXT ACCESS RULES - Owner and shared users
    // =====================================================
    match /context_access_rules/{ruleId} {
      allow read: if isAuthenticated() && 
                    (resource.data.sharedBy == request.auth.uid || 
                     request.auth.uid in resource.data.sharedWith ||
                     isAdmin());
      
      allow create, update, delete: if isAuthenticated() && 
                                      (resource.data.sharedBy == request.auth.uid || isAdmin());
    }
  }
}
















