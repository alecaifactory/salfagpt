---
// Admin page to list all agents for a user
import { getSession } from '../lib/auth';
import { getConversations } from '../lib/firestore';

// Get session
const session = getSession(Astro as any);

if (!session) {
  return Astro.redirect('/auth/login');
}

// Get user ID (defaults to current session user)
const queryUserId = Astro.url.searchParams.get('userId') || session.id;

// Get agents
let agents = [];
try {
  agents = await getConversations(queryUserId);
} catch (error) {
  console.error('Error loading agents:', error);
}
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Lista de Agentes - Admin</title>
  <style>
    body {
      font-family: system-ui, -apple-system, sans-serif;
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
      background: #f8fafc;
    }
    h1 {
      color: #1e293b;
      margin-bottom: 10px;
    }
    .info {
      color: #64748b;
      margin-bottom: 30px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      border-radius: 8px;
      overflow: hidden;
    }
    thead {
      background: linear-gradient(to right, #3b82f6, #6366f1);
      color: white;
    }
    th {
      padding: 12px 16px;
      text-align: left;
      font-weight: 600;
      font-size: 14px;
    }
    td {
      padding: 12px 16px;
      border-bottom: 1px solid #e2e8f0;
      font-size: 14px;
    }
    tr:hover {
      background: #f8fafc;
    }
    .badge {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      font-weight: 600;
    }
    .badge-pro {
      background: #f3e8ff;
      color: #7c3aed;
    }
    .badge-flash {
      background: #dcfce7;
      color: #16a34a;
    }
    .id-cell {
      font-family: monospace;
      font-size: 12px;
      color: #64748b;
    }
    .back-link {
      display: inline-block;
      margin-top: 20px;
      color: #3b82f6;
      text-decoration: none;
      font-weight: 500;
    }
    .back-link:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <h1>üìã Lista de Agentes</h1>
  <div class="info">
    <strong>Usuario:</strong> {session.email}<br>
    <strong>Total de agentes:</strong> {agents.length}
  </div>

  {agents.length === 0 ? (
    <p style="color: #64748b; text-align: center; padding: 40px;">
      No se encontraron agentes para este usuario.
    </p>
  ) : (
    <table>
      <thead>
        <tr>
          <th style="width: 50px;">#</th>
          <th>T√≠tulo</th>
          <th style="width: 100px;">Modelo</th>
          <th style="width: 100px; text-align: right;">Mensajes</th>
          <th style="width: 150px;">√öltima Actividad</th>
          <th style="width: 200px;">ID</th>
        </tr>
      </thead>
      <tbody>
        {agents.map((agent, index) => {
          const lastActivity = new Date(agent.lastMessageAt).toLocaleDateString('es-ES', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
          });
          
          return (
            <tr>
              <td>{index + 1}</td>
              <td><strong>{agent.title || 'Sin t√≠tulo'}</strong></td>
              <td>
                <span class={agent.agentModel === 'gemini-2.5-pro' ? 'badge badge-pro' : 'badge badge-flash'}>
                  {agent.agentModel === 'gemini-2.5-pro' ? 'Pro' : 'Flash'}
                </span>
              </td>
              <td style="text-align: right;">{agent.messageCount || 0}</td>
              <td>{lastActivity}</td>
              <td class="id-cell">{agent.id}</td>
            </tr>
          );
        })}
      </tbody>
    </table>
  )}

  <a href="/chat" class="back-link">‚Üê Volver al Chat</a>
</body>
</html>

