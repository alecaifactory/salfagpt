---
import ChatInterfaceWorking from '../components/ChatInterfaceWorking.tsx';
import { verifyJWT } from '../lib/auth';
import { isUserDomainEnabled, getDomainFromEmail } from '../lib/domains';
import '../styles/global.css';

// üîí SECURITY: Always require authentication
const cookies = Astro.cookies;
const token = cookies.get('flow_session')?.value;

// Log authentication attempt
console.log('üîê Authentication check:', {
  hasToken: !!token,
  timestamp: new Date().toISOString(),
  path: '/chat'
});

// No token = redirect to login
if (!token) {
  console.warn('‚ö†Ô∏è Unauthorized access attempt to /chat - no token');
  return Astro.redirect('/auth/login?error=unauthorized&redirect=/chat');
}

// Verify token
let userId: string;
let userEmail: string;
let userName: string;

let userRole: string;

try {
  const decoded = verifyJWT(token);
  
  if (!decoded) {
    console.warn('‚ö†Ô∏è Invalid JWT token');
    return Astro.redirect('/auth/login?error=session_expired&redirect=/chat');
  }
  
  // ‚úÖ CRITICAL: Use Google OAuth numeric ID (permanent, unique identifier)
  userId = decoded.id || decoded.sub; // Google OAuth ID
  userEmail = decoded.email || 'usuario@flow.ai';
  userName = decoded.name || decoded.email?.split('@')[0] || 'Usuario';
  userRole = decoded.role || 'user'; // ‚úÖ Extract role from JWT
  
  // Log successful authentication
  console.log('‚úÖ User authenticated:', {
    userId: userId.substring(0, 8) + '...',
    email: userEmail,
    role: userRole,
    timestamp: new Date().toISOString()
  });
  
  // üîí CRITICAL Security: Verify domain is still enabled
  // (In case domain was disabled after user logged in)
  const isDomainEnabled = await isUserDomainEnabled(userEmail);
  
  if (!isDomainEnabled) {
    const userDomain = getDomainFromEmail(userEmail);
    console.warn('üö® Access denied - domain disabled for active session:', {
      email: userEmail,
      domain: userDomain,
      timestamp: new Date().toISOString(),
    });
    
    // Clear session and redirect to login with error
    cookies.delete('flow_session', { path: '/' });
    return Astro.redirect(`/auth/login?error=domain_disabled&domain=${encodeURIComponent(userDomain)}`);
  }
  
  console.log('‚úÖ Domain access verified for active session:', {
    email: userEmail,
    domain: getDomainFromEmail(userEmail),
  });
} catch (error) {
  // Token invalid or expired
  console.error('‚ùå JWT verification failed:', error instanceof Error ? error.message : 'Unknown error');
  return Astro.redirect('/auth/login?error=session_expired&redirect=/chat');
}
---

<!DOCTYPE html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat - Flow</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Theme initialization script - runs BEFORE page renders to prevent FOUC -->
    <script is:inline>
      (function() {
        // Try to load theme from localStorage first (instant)
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        
        // Then load from Firestore and update if different
        // This happens async after initial render
        const userId = '${userId}'; // Template literal with Astro variable
        if (userId && userId !== '\${userId}') {
          fetch(`/api/user-settings?userId=${userId}`)
            .then(r => r.ok ? r.json() : null)
            .then(data => {
              if (data && data.theme) {
                const firestoreTheme = data.theme;
                // Only update if different from localStorage
                if (savedTheme !== firestoreTheme) {
                  localStorage.setItem('theme', firestoreTheme);
                  if (firestoreTheme === 'dark') {
                    document.documentElement.classList.add('dark');
                  } else {
                    document.documentElement.classList.remove('dark');
                  }
                }
              }
            })
            .catch(() => {
              // Fallback to light on error
              if (!savedTheme) {
                document.documentElement.classList.remove('dark');
                localStorage.setItem('theme', 'light');
              }
            });
        }
      })();
    </script>
  </head>
  <body class="h-full m-0 p-0">
    <ChatInterfaceWorking 
      client:only="react" 
      userId={userId}
      userEmail={userEmail}
      userName={userName}
      userRole={userRole}
    />
  </body>
</html>
