---
import { requireAuth } from '../lib/auth';
import { hasAnalyticsAccess, getUserRole } from '../lib/analytics';
import '../styles/global.css';

// Protect this route - require authentication
const session = requireAuth(Astro);
if (!session) {
  return Astro.redirect('/');
}

const user = session;
const userRole = getUserRole(session.email);
const canAccessAnalytics = hasAnalyticsAccess(session.email, userRole);
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>OpenFlow - Chat</title>
</head>
<body class="bg-slate-50">
  <div class="flex flex-col h-screen">
    
    <!-- Header -->
    <header class="bg-white border-b border-slate-200 shadow-sm">
      <div class="max-w-7xl mx-auto px-4 py-3 flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <h1 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            OpenFlow
          </h1>
          <span class="text-sm text-slate-500 hidden md:inline">
            AI-Powered Conversations
          </span>
        </div>
        
        <div class="flex items-center space-x-4">
          <!-- Analytics Link (if authorized) -->
          {canAccessAnalytics && (
            <a 
              href="/analytics"
              class="flex items-center space-x-2 px-3 py-2 text-sm text-slate-700 hover:text-blue-600 transition-colors"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
              <span class="hidden md:inline">Analytics</span>
            </a>
          )}
          
          <!-- User Info -->
          <div class="flex items-center space-x-3">
            <img 
              src={user.picture} 
              alt={user.name}
              class="w-8 h-8 rounded-full border-2 border-blue-500"
            />
            <span class="text-sm text-slate-700 hidden md:inline">{user.name}</span>
          </div>
          
          <!-- Logout Button -->
          <a 
            href="/auth/logout"
            class="btn btn-secondary text-sm"
          >
            Logout
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <div class="flex-1 flex overflow-hidden">
      
      <!-- Sidebar (Chat History) -->
      <aside class="w-64 bg-slate-900 text-white p-4 overflow-y-auto hidden md:block">
        <div class="space-y-4">
          <button class="w-full btn bg-blue-600 hover:bg-blue-700 text-white flex items-center justify-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            <span>New Chat</span>
          </button>
          
          <div class="space-y-2">
            <h3 class="text-xs font-semibold text-slate-400 uppercase tracking-wider">Recent Chats</h3>
            <div class="space-y-1">
              <div class="p-3 rounded-lg hover:bg-slate-800 cursor-pointer transition-colors">
                <p class="text-sm font-medium truncate">Getting Started with AI</p>
                <p class="text-xs text-slate-400">2 hours ago</p>
              </div>
              <div class="p-3 rounded-lg hover:bg-slate-800 cursor-pointer transition-colors">
                <p class="text-sm font-medium truncate">Cloud Architecture Help</p>
                <p class="text-xs text-slate-400">Yesterday</p>
              </div>
              <div class="p-3 rounded-lg hover:bg-slate-800 cursor-pointer transition-colors">
                <p class="text-sm font-medium truncate">Code Review Questions</p>
                <p class="text-xs text-slate-400">2 days ago</p>
              </div>
            </div>
          </div>
        </div>
      </aside>

      <!-- Chat Area -->
      <main class="flex-1 flex flex-col bg-slate-50">
        
        <!-- Messages Container -->
        <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4">
          
          <!-- Welcome Message -->
          <div class="max-w-3xl mx-auto text-center py-12">
            <div class="space-y-4">
              <h2 class="text-3xl font-bold text-slate-800">
                Welcome, {user.name.split(' ')[0]}!
              </h2>
              <p class="text-lg text-slate-600">
                How can I help you today?
              </p>
              
              <!-- Quick Start Prompts -->
              <div class="grid md:grid-cols-2 gap-4 mt-8">
                <button class="card text-left hover:border-blue-500 border-2 border-transparent transition-all">
                  <p class="text-sm font-semibold text-slate-800">Explain a concept</p>
                  <p class="text-xs text-slate-600 mt-1">Help me understand complex topics</p>
                </button>
                <button class="card text-left hover:border-blue-500 border-2 border-transparent transition-all">
                  <p class="text-sm font-semibold text-slate-800">Write code</p>
                  <p class="text-xs text-slate-600 mt-1">Generate and debug code snippets</p>
                </button>
                <button class="card text-left hover:border-blue-500 border-2 border-transparent transition-all">
                  <p class="text-sm font-semibold text-slate-800">Brainstorm ideas</p>
                  <p class="text-xs text-slate-600 mt-1">Creative solutions for your projects</p>
                </button>
                <button class="card text-left hover:border-blue-500 border-2 border-transparent transition-all">
                  <p class="text-sm font-semibold text-slate-800">Analyze data</p>
                  <p class="text-xs text-slate-600 mt-1">Help with data insights and analysis</p>
                </button>
              </div>
            </div>
          </div>

          <!-- Sample messages (will be replaced by actual chat) -->
          <div id="chat-messages" class="max-w-3xl mx-auto w-full space-y-4">
            <!-- Messages will be added here dynamically -->
          </div>
          
        </div>

        <!-- Input Area -->
        <div class="border-t border-slate-200 bg-white p-4">
          <form id="chat-form" class="max-w-3xl mx-auto">
            <div class="flex space-x-4">
              <input
                type="text"
                id="message-input"
                placeholder="Send a message..."
                class="input flex-1"
                autocomplete="off"
              />
              <button 
                type="submit"
                class="btn btn-primary px-6 flex items-center space-x-2"
              >
                <span>Send</span>
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                </svg>
              </button>
            </div>
          </form>
        </div>

      </main>
    </div>
  </div>

  <!-- Client-side JavaScript for chat functionality -->
  <script>
    const chatForm = document.getElementById('chat-form') as HTMLFormElement;
    const messageInput = document.getElementById('message-input') as HTMLInputElement;
    const chatMessages = document.getElementById('chat-messages') as HTMLElement;

    chatForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const message = messageInput.value.trim();
      if (!message) return;

      // Add user message to UI
      addMessage(message, 'user');
      messageInput.value = '';

      // Show loading indicator
      const loadingId = addLoadingMessage();

      try {
        // Send message to API
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message }),
        });

        const data = await response.json();

        // Remove loading indicator
        removeLoadingMessage(loadingId);

        // Add AI response to UI
        if (data.response) {
          addMessage(data.response, 'assistant');
        } else {
          addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
        }
      } catch (error) {
        console.error('Error sending message:', error);
        removeLoadingMessage(loadingId);
        addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
      }
    });

    function addMessage(text: string, role: 'user' | 'assistant') {
      const messageDiv = document.createElement('div');
      messageDiv.className = `flex ${role === 'user' ? 'justify-end' : 'justify-start'}`;
      
      const bubble = document.createElement('div');
      bubble.className = `max-w-[80%] rounded-2xl px-4 py-3 ${
        role === 'user' 
          ? 'bg-blue-600 text-white' 
          : 'bg-white border border-slate-200 text-slate-800'
      }`;
      bubble.textContent = text;
      
      messageDiv.appendChild(bubble);
      chatMessages.appendChild(messageDiv);
      
      // Scroll to bottom
      chatMessages.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }

    let loadingCounter = 0;

    function addLoadingMessage(): string {
      const id = `loading-${loadingCounter++}`;
      const messageDiv = document.createElement('div');
      messageDiv.id = id;
      messageDiv.className = 'flex justify-start';
      
      const bubble = document.createElement('div');
      bubble.className = 'bg-white border border-slate-200 rounded-2xl px-4 py-3';
      bubble.innerHTML = '<div class="flex space-x-2"><div class="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div><div class="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div><div class="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div></div>';
      
      messageDiv.appendChild(bubble);
      chatMessages.appendChild(messageDiv);
      
      return id;
    }

    function removeLoadingMessage(id: string) {
      const element = document.getElementById(id);
      element?.remove();
    }
  </script>
</body>
</html>

