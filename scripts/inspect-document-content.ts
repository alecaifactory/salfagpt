#!/usr/bin/env tsx
/**
 * Script para Inspeccionar el Contenido Completo de un Documento
 * 
 * Muestra TODOS los detalles de un context source espec√≠fico
 * incluyendo el extractedData completo.
 * 
 * Uso: npx tsx scripts/inspect-document-content.ts [nombre-del-documento]
 */

import { firestore } from '../src/lib/firestore.js';

const documentName = process.argv[2] || 'SOC 2  eBook.pdf';

async function inspectDocument() {
  console.log(`üîç Inspeccionando: "${documentName}"`);
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  try {
    // Search for document by name
    const snapshot = await firestore
      .collection('context_sources')
      .where('name', '==', documentName)
      .get();

    if (snapshot.empty) {
      console.log(`‚ùå No se encontr√≥ el documento "${documentName}" en Firestore`);
      console.log('\nüìã Documentos disponibles:');
      
      const allDocs = await firestore
        .collection('context_sources')
        .orderBy('addedAt', 'desc')
        .limit(10)
        .get();
      
      allDocs.docs.forEach((doc, i) => {
        console.log(`   ${i + 1}. ${doc.data().name}`);
      });
      
      process.exit(1);
    }

    // Display all found documents with this name
    console.log(`‚úÖ Encontrados ${snapshot.size} documento(s) con este nombre:\n`);

    snapshot.docs.forEach((doc, index) => {
      const data = doc.data();
      
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
      console.log(`üìÑ DOCUMENTO #${index + 1}`);
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`);

      console.log(`üÜî ID: ${doc.id}`);
      console.log(`üìõ Nombre: ${data.name}`);
      console.log(`üìÑ Tipo: ${data.type}`);
      console.log(`üéØ Estado: ${data.status}`);
      console.log(`üë§ Usuario: ${data.userId}`);
      console.log(`üìÖ Subido: ${data.addedAt?.toDate?.() || data.addedAt}`);
      console.log(`üîß Fuente: ${data.source || 'unknown'}`);
      
      if (data.assignedToAgents && data.assignedToAgents.length > 0) {
        console.log(`ü§ñ Asignado a agentes: ${data.assignedToAgents.join(', ')}`);
      }

      console.log('');

      // METADATA
      if (data.metadata && Object.keys(data.metadata).length > 0) {
        console.log('üìä METADATA:');
        Object.entries(data.metadata).forEach(([key, value]) => {
          console.log(`   ‚Ä¢ ${key}: ${value}`);
        });
        console.log('');
      } else {
        console.log('‚ö†Ô∏è  NO hay metadata de extracci√≥n\n');
      }

      // ERROR
      if (data.error) {
        console.log('‚ùå ERROR:');
        console.log(`   Mensaje: ${data.error.message}`);
        if (data.error.details) {
          console.log(`   Detalles: ${data.error.details}`);
        }
        if (data.error.timestamp) {
          const errorDate = data.error.timestamp.toDate ? 
            data.error.timestamp.toDate() : 
            new Date(data.error.timestamp);
          console.log(`   Timestamp: ${errorDate.toLocaleString('es-ES')}`);
        }
        console.log('');
      }

      // PROGRESS
      if (data.progress) {
        console.log('üìä PROGRESO:');
        console.log(`   Etapa: ${data.progress.stage}`);
        console.log(`   Porcentaje: ${data.progress.percentage}%`);
        console.log(`   Mensaje: ${data.progress.message}`);
        console.log('');
      }

      // EXTRACTED DATA
      console.log('üìñ CONTENIDO EXTRA√çDO:');
      if (data.extractedData) {
        const length = data.extractedData.length;
        console.log(`   ‚úÖ ${length.toLocaleString()} caracteres extra√≠dos\n`);
        
        console.log('   üìù PRIMEROS 500 CARACTERES:');
        console.log('   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        const preview = data.extractedData.substring(0, 500);
        preview.split('\n').forEach(line => {
          console.log(`   ‚îÇ ${line}`);
        });
        if (length > 500) {
          console.log(`   ‚îÇ ... (${length - 500} caracteres m√°s)`);
        }
        console.log('   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
        console.log('');

        // Analyze content
        const lines = data.extractedData.split('\n');
        const words = data.extractedData.split(/\s+/).filter(w => w.length > 0);
        const hasCode = data.extractedData.includes('```');
        const hasTables = data.extractedData.includes('|');
        const hasHeadings = /^#+\s/m.test(data.extractedData);

        console.log('   üìä AN√ÅLISIS DEL CONTENIDO:');
        console.log(`      ‚Ä¢ L√≠neas totales: ${lines.length}`);
        console.log(`      ‚Ä¢ Palabras: ${words.length}`);
        console.log(`      ‚Ä¢ Bloques de c√≥digo: ${hasCode ? 'S√≠' : 'No'}`);
        console.log(`      ‚Ä¢ Tablas: ${hasTables ? 'S√≠' : 'No'}`);
        console.log(`      ‚Ä¢ Encabezados: ${hasHeadings ? 'S√≠' : 'No'}`);
        
        // Check if content looks valid
        if (length < 100) {
          console.log(`      ‚ö†Ô∏è  ADVERTENCIA: Muy poco contenido extra√≠do (< 100 caracteres)`);
        }
        if (data.extractedData.includes('error') || data.extractedData.includes('failed')) {
          console.log(`      ‚ö†Ô∏è  ADVERTENCIA: El texto contiene palabras de error`);
        }
        
        console.log('');
      } else {
        console.log('   ‚ùå NO HAY CONTENIDO EXTRA√çDO');
        console.log('   ‚ö†Ô∏è  El documento se guard√≥ pero la extracci√≥n fall√≥ o est√° vac√≠a\n');
      }

      console.log('');
    });

    console.log('\nüí° DIAGN√ìSTICO:');
    
    const problematicDocs = snapshot.docs.filter(doc => {
      const data = doc.data();
      return !data.extractedData || data.extractedData.length < 100 || data.status === 'error';
    });

    if (problematicDocs.length > 0) {
      console.log('   ‚ö†Ô∏è  Se encontraron documentos con problemas:');
      problematicDocs.forEach(doc => {
        const data = doc.data();
        console.log(`      ‚Ä¢ ${data.name}: ${!data.extractedData ? 'Sin contenido' : `Contenido muy corto (${data.extractedData.length} chars)`}`);
      });
      console.log('\n   üîß SOLUCIONES:');
      console.log('      1. Re-extraer con modelo Pro (m√°s preciso)');
      console.log('      2. Verificar que el PDF no est√© escaneado (imagen)');
      console.log('      3. Verificar que el PDF no est√© protegido/encriptado');
      console.log('      4. Intentar con un l√≠mite mayor de tokens (maxOutputTokens)');
    } else {
      console.log('   ‚úÖ Todos los documentos tienen contenido extra√≠do correctamente');
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }

  process.exit(0);
}

inspectDocument();



